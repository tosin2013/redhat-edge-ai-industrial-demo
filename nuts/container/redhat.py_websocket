#!/bin/env python3
import cv2
import numpy as np
from PIL import Image
from flask import Flask, send_file, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import torch
import threading
import io
from io import BytesIO
import base64
import time
import os
import eventlet

# Model
model = torch.hub.load('yolov5', 'custom', path='/app/nut.pt', source='local')

directory = os.getcwd()
print(directory)


app = Flask(__name__, template_folder='templates/')
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet', engineio_logger=True)


video_path = '2023-05-26_15-36-08.mkv'
cap = None
imb64 = None
frame_lock = threading.Lock()


@socketio.on('connect')
def handle_connect():
    emit('message', {'data': 'Connected'})

@socketio.on('disconnect')
def handle_disconnect():
    print('Client disconnected')


def read_video():
    global cap, imb64 
    cap = cv2.VideoCapture(video_path)

    while True:
        ret, frame = cap.read()
        results = model(frame)
        results.render()  # updates results.ims with boxes and labels
        for im in results.ims:
            buffered = BytesIO()
            im_base64 = Image.fromarray(im)
            im_base64.save(buffered, format="JPEG")
            imb64 = base64.b64encode(buffered.getvalue())


        print(results.pandas().xyxy[0])
        time.sleep(10)
        print("============================================================================")
        if not ret:
            break

@app.route('/image')
def get_image():
    global imb64, frame_lock

    if imb64 is None:
        return "No more frames available."

    # Process the frame or perform any desired operations
    print(imb64)
    imb64_send = imb64
    socketio.emit('image', imb64_send)
    return True



@app.route('/')
def index():
    return render_template('index.html')


if __name__ == '__main__':
    frame_thread = threading.Thread(target=read_video)
    frame_thread.start()
    socketio.run(app, host='0.0.0.0', port=5000, debug=True)
    frame_thread.join()

